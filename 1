pragma solidity ^0.8.0;

contract Marketplace {
    struct Product {
        uint256 id;
        string name;
        uint256 price;
        address payable seller;
        bool available;
    }

    uint256 public productCount;
    mapping(uint256 => Product) public products;

    event ProductAdded(uint256 indexed id, string name, uint256 price, address indexed seller);
    event ProductPurchased(uint256 indexed id, string name, uint256 price, address indexed seller, address indexed buyer);

    function addProduct(string memory _name, uint256 _price) public {
        productCount++;
        products[productCount] = Product({
            id: productCount,
            name: _name,
            price: _price,
            seller: payable(msg.sender),
            available: true
        });

        emit ProductAdded(productCount, _name, _price, msg.sender);
    }

    function purchaseProduct(uint256 _id) public payable {
        Product storage product = products[_id];
        require(product.available, "Product is not available.");
        require(msg.value == product.price, "Incorrect payment amount.");

        product.available = false;

        emit ProductPurchased(_id, product.name, product.price, product.seller, msg.sender);

        // Transfer funds to the seller
        product.seller.transfer(msg.value);
    }
}
